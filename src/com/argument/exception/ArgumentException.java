package com.argument.exception;

public class ArgumentException extends Exception {
	/**
	 * This class defines exceptions and error messages generated by the unwanted
	 * arguments
	 */
	public enum ErrorCode {
		OK, 
		INVALID_ARGUMENT_FORMAT, 
		UNEXPECTED_ARGUMENT, 
		INVALID_ARGUMENT_NAME,
		MISSING_STRING, 
		MISSING_INTEGER,
		INVALID_INTEGER, 
		MISSING_DOUBLE, 
		MALFORMED_MAP, 
		MISSING_MAP, 
		INVALID_DOUBLE
	}

	private char errorArgumentId = '\0';
	
	private ErrorCode errorCode = ErrorCode.OK;
	
	private String errorParameter = null;

	public ArgumentException(final ErrorCode errorCode) {
		this.errorCode = errorCode;
	}

	public ArgumentException(final ErrorCode errorCode, final char errorArgumentId, final String errorParameter) {

		this.errorCode = errorCode;

		this.errorParameter = errorParameter;

		this.errorArgumentId = errorArgumentId;
	}

	public ArgumentException(final ErrorCode errorCode, final String errorParameter) {

		this.errorCode = errorCode;

		this.errorParameter = errorParameter;
	}

	public ArgumentException(final String message) {
		super(message);
	}

	public char getErrorArgumentId() {
		return errorArgumentId;
	}

	public ErrorCode getErrorCode() {
		return errorCode;
	}

	public String getErrorMessage() {
		String errorMessage = "";

		switch (errorCode) {
		case OK: {
			errorMessage = "TILT: Should not get here.";
			break;
		}
		case UNEXPECTED_ARGUMENT: {
			errorMessage = String.format("Argument -%c unexpected.", errorArgumentId);
			break;
		}
		case MISSING_STRING: {
			errorMessage = String.format("Could not find string parameter for -%c.", errorArgumentId);
			break;
		}
		case INVALID_INTEGER: {
			errorMessage = String.format("Argument -%c expects an integer but was '%s'.", errorArgumentId,
			        errorParameter);
			break;
		}
		case MISSING_INTEGER: {
			errorMessage = String.format("Could not find integer parameter for -%c.", errorArgumentId);
			break;
		}
		case INVALID_DOUBLE: {
			errorMessage = String.format("Argument -%c expects a double but was '%s'.", errorArgumentId,
			        errorParameter);
			break;
		}
		case MISSING_DOUBLE: {
			errorMessage = String.format("Could not find double parameter for -%c.", errorArgumentId);
			break;
		}
		case INVALID_ARGUMENT_NAME: {
			errorMessage = String.format("'%c' is not a valid argument name.", errorArgumentId);
			break;
		}
		case INVALID_ARGUMENT_FORMAT: {
			errorMessage = String.format("'%s' is not a valid argument format.", errorParameter);
			break;
		}
		case MISSING_MAP: {
			errorMessage = String.format("Could not find map string for -%c.", errorArgumentId);
			break;
		}
		case MALFORMED_MAP: {
			errorMessage = String.format("Map string for -%c is not of form k1:v1,k2:v2...", errorArgumentId);
			break;
		}
		default: {
			errorMessage = String.format("Unexpected error occured for -%c", errorArgumentId);
			break;
		}
		}

		return errorMessage;
	}

	public String getErrorParameter() {
		return errorParameter;
	}

	public void setErrorArgumentId(final char errorArgumentId) {
		this.errorArgumentId = errorArgumentId;
	}

	public void setErrorCode(final ErrorCode errorCode) {
		this.errorCode = errorCode;
	}

	public void setErrorParameter(final String errorParameter) {
		this.errorParameter = errorParameter;
	}
}
